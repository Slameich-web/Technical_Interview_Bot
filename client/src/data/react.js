export const react = [
    {
        id: "0",
        title: "Основы",
        description: 'Данный блок расчитан на ознакомление с библиотекой ReactJS',
        questions: [
            {
                id: '0',
                title: 'Что такое React?',
                answer: 'Это js библиотека с открытым исходным кодом, отвечает за слой представление, в основе лежит компонентный подход'
            },
            {
                id: '1',
                title: 'Особенности React?',
                answer: `Virtual DOM
                SSR (next js)
                One way direction data flow 
                Переиспользование компонентов`
            },
            {
                id: '2',
                title: 'Что такое Virtual DOM?',
                answer: 'Более легковесная схема дом дерева, в которой происходит сравнение изменений, после чего только необходимые изменения попадают в DOM дерево'
            },
            {
                id: '3',
                title: 'Для чего нужен key?',
                answer: 'Помогает реакту определить какие элементы были изменены, ключи должны быть уникальными'
            },
            {
                id: '4',
                title: 'Что такое HOC?',
                answer: 'Higher Order Component - Это техника переиспользования компонентной логики, это функция которая принимает другой компонент и расширяет его функциональность, и возвращает новый компонент'
            },
            {
                id: '5',
                title: 'Разница между управляемыми и не управляемыми компонентами?',
                answer: 'Не управляемые компоненты опираются на DOM в качестве источника данных, а управляемые опираются на state'
            },
            {
                id: '6',
                title: 'Методы жизненного цикла компонента?',
                answer: `
                ComponentDidMount - При рендере компонента
                ComponentDidUpdate - При обновлении компонента
                ComponentWillUnmount - При удалении компонента
                `
            },
            {
                id: '7',
                title: 'Что такое React Portal?',
                answer: `Это компонент который рендерит свое содержимое в произвольную часть DOM дерева

                Основное применение модальные и диалоговые окна`
            },
            {
                id: '8',
                title: 'Что такое React Context?',
                answer: 'Способ передачи данных без вложения пропсов '
            },
            {
                id: '9',
                title: 'Что такое JSX?',
                answer: 'Это новый диалект языка JS который позволяет использовать HTML код в JS коде '
            },
            {
                id: '10',
                title: 'Разница между пропсами и состоянием?',
                answer: `Состояние это объект содержащий некую информацию которая может измениться, является приватным и полностью контролируется компонентом 

                Пропсы это входные данные для компонента`
            },
            {
                id: '11',
                title: ' Что такое React Fragment ?',
                answer: 'Фрагмент позволяет группировать несколько элементов без создания лишних DOM узлов, это специальный тег который не отрисовывается в DOM дереве  '
            },
            {
                id: '12',
                title: 'Что такое синтетические событие?',
                answer: 'Это кросс браузерная оболочка для событий в браузере'
            },
            {
                id: '13',
                title: 'Что такое Ref?',
                answer: 'Используются для ссылки на DOM дерева, это практически аналог метода getElementById'
            },
            {
                id: '14',
                title: 'Разница между теневым и виртуальным DOM?',
                answer: `
                Оба создают одтельный инстанс DOM дерева
                Virtual DOM создает все копию DOM дерева
                Shadow DOM создает небольшие части объекта DOM
                `
            },
            {
                id: '15',
                title: 'Преимущества React?',
                answer: `
                Увеличение производительности 

                JSX 

                Компонентный подход

                Большое комьюнити
                `
            },
            {
                id: '16',
                title: 'Что такое условный рендеринг?',
                answer: 'Это своеобразное if else условие которое позволяет отрендерить определенный кусок разметки '
            },
            {
                id: '17',
                title: 'React vs ReactDOM?',
                answer: `
                React - универсальная библиотека 

                ReactDOM - библиотека для работы только с web
                `
            },
            {
                id: '18',
                title: 'Что такое строгий режим в React?',
                answer: `
                Он активирует дополнительные проверки 

                Используется только для разработки
                `
            },
            {
                id: '19',
                title: 'Что такое Props Drilling??',
                answer: 'Это антипаттерн возникает при передаче props через несколько уровней компонентов '
            },
            {
                id: '20',
                title: 'Что такое children?',
                answer: 'Это пропс позволяющий передавать jsx код между тегами'
            },
            {
                id: '21',
                title: 'Function components vs class components?',
                answer: `
                Функциональные компоненты не имеют встроенной логики в отличии от классовых (классовые компоненты всегда имеют под капотом много функций, даже если вы их не используете)

                Функциональные компоненты не имеют функции render`
            },
            {
                id: '22',
                title: 'Что такое Компонент?',
                answer: 'Участок кода, который представляет часть веб-страницы. Каждый компонент — это JavaScript-функция, которая возвращает кусок кода, представляющего фрагмент страницы'
            },

        ]
    },
    {
        id: "1",
        title: "hooks",
        description: 'В этом блоке вы узнаете про относительно новый подход к написанию кода в React',
        questions: [
            {
                id: '0',
                title: 'Что такое хуки? (hook)',
                answer: 'Хук это нововведение в React 16.8, которое позволяет использовать состояние и другие возможности React без написания классов'
            },
            {
                id: '1',
                title: 'Что такое useState? Для чего он используется?',
                answer: 'Хук для создания состояния'
            },
            {
                id: '2',
                title: 'useEffect vs componentDidMount',
                answer: 'useEffect запускается после отображения результат рендеринга, а componentDidMount до рендеринга'
            },
            {
                id: '3',
                title: 'Преимущества хуков',
                answer: `
                Улучшение читаемости

                Разделение логики 

                Повышает переиспользуемость

                Позволяют меньше использовать HOC
                `
            },
            {
                id: '4',
                title: 'Правила использования хуков',
                answer: `
                Нельзя использовать во вложенных конструкциях (for if)

                Вызывать хуки можно только в функциях или хуках`
            },
            {
                id: '5',
                title: 'Что такое useReducer?',
                answer: 'Это хук принимающий функцию Reducer и начальное состояние приложение и возвращающий текущие состояние и диспетчер'
            },
            {
                id: '6',
                title: 'Как реализовать однократное выполнение операции при начальном рендеринге',
                answer: `
                componentDidMount

                UseEffect((), []) с пустым массивом зависимостей
                `
            },
        ]
    },
    {
        id: "2",
        title: "Redux",
        description: 'В этом блоке вы узнаете про Redux',
        questions: [
            {
                id: '0',
                title: 'Что такое Flux?',
                answer: 'Это архитектурный подход или набор шаблонов для построения пользовательского интерфейса веб приложения, основная особенность является односторонняя направленность передачи данных '
            },
            {
                id: '1',
                title: 'Что такое Redux?',
                answer: `
                Это контейнер для хранения информации, основанный на flux предназначен для управления состоянием приложения, базируется на трех основных принципах;

                1. Единственный источник истины
                2. Состояние доступно только для чтения
                3. Изменение происходит только с помощью чистых функций
                `
            },
            {
                id: '2',
                title: 'Что такое Reducer?',
                answer: 'Это чистая функция определяющая изменения состояния приложения, она использует операции для определения характера изменений '
            },
            {
                id: '3',
                title: 'Плюсы и минусы Redux',
                answer: `
                Плюсы

                Получение состояния без передачи пропсов

                Состояние сохраняются при размонтировании компонента 

                Предотвращение повторных рендерингов 

                Разделение UI и логики

                Минусы

                Отсутствие инкапсуляции

                Много шаблонного кода 

                Расходы памяти на обновление состояния
                `
            },
        ]
    },
]
